很多Android开发者不明白APK签名有什么作用，其实APK签名用处主要有两种:
 1. 使用特殊的key签名可以获取到一些不同的权限。

 2. APK如果使用一个key签名，发布时另一个key签名的文件将无法安装或覆盖老的版本，
     这样可以防止你已安装的应用被恶意的第三方覆盖或替换掉。

 3.防止程序发布后被篡改签名一般用私钥，私钥签名以后会生成harsh值序列，
   公钥验证的时候（手机上），会根据文   件内容再生成一次harsh序列，如果和apk中的harsh序列相同，
   说明apk发布后没有被篡改过。


 4.应用程序升级：如果你希望用户无缝升级到新的版本，那么你必须用同一个证书进行签名。这是由于只  
有以同一个证书签名，系统才会允许安装升级的应用程序。如果你采用了不同的证书，那么系统会要求你
的应用程序采用不同的包名称，在这种情况下相当于安装了一个全新的应用程序。如果想升级应用程序，
签名证书要相同，包名称要相同！

5.应用程序模块化：Android系统可以允许同一个证书签名的多个应用程序在一个进程里运行，系统实际
把他们作为一个单个的应用程序，此时就可以把我们的应用程序以模块的方式进行部署，而用户可以独立
的升级其中的一个模块 

6.代码或者数据共享：Android提供了基于签名的权限机制，那么一个应用程序就可以为另一个以相同证
书签名的应用程序公开自己的功能。以同一个证书对多个应用程序进行签名，利用基于签名的权限检查，
你就可以在应用程序间以安全的方式共享代码和数据了。 

目前Google在Android系统方面的态度和策略也都是非盈利性质的，
和Symbian的签名有本质的区别，而我们使用Eclipse+ADT插件从开发环境安装到手机中的APK文件已经
包含了ADT插件的Debug签名文件，所以没有安装，但是最终发行的版本需要自己的key去签名。


创建加密文件
keytool -genkey -v -keystore dazen.keystore -alias dazen.keystore -keyalg RSA -validity 20000

查看SHA1
keytool -list -keystore dazen.keystore

手动加密APK
jarsigner -verbose -sigalg SHA1withDSA -digestalg SHA1 -keystore ./dazen.keysotre -storepass dazen9527 JustWayward-BookReader/app/VReader.apk

比较SHA1加密后是否一样
keytool -printcert -file VReader/META-INF/DAZEN_KE.RSA
